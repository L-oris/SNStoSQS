import * as Router from 'koa-router'
import {
  createSNSTopic,
  createSQSQueue,
  subscribeSQStoSNS,
  updateSQSPermissions,
  SNSTopicInterface,
  SQSQueueInterface,
} from './aws/create'
import { publish } from './aws/publish'
import { consumeMessages } from './aws/consume'
import { SNS } from 'aws-sdk'

// variables generated by creating sns topics & sqs queues
interface ConfigInterface {
  snsTopicArn?: string
  sqsQueueUrl?: string
  sqsQueueArn?: string
}
let config: ConfigInterface = {}

const router: Router = new Router()

router.get('/', ctx => {
  ctx.body = 'Hi there'
})

router.get('/create', async ctx => {
  const snsTopic: SNSTopicInterface = await createSNSTopic('demo')
  const sqsQueue: SQSQueueInterface = await createSQSQueue('demo')

  if (!snsTopic.arn) throw new Error('Failed to create new SNS Topic')
  if (!sqsQueue.url || !sqsQueue.arn)
    throw new Error('Failed to create new SQS Queue')

  await subscribeSQStoSNS({
    snsTopicArn: snsTopic.arn,
    sqsQueueArn: sqsQueue.arn,
  })
  await updateSQSPermissions({
    snsTopicArn: snsTopic.arn,
    sqsQueueUrl: sqsQueue.url,
    sqsQueueArn: sqsQueue.arn,
  })

  // make credentials available
  config.sqsQueueUrl = sqsQueue.url
  config.sqsQueueArn = sqsQueue.arn
  config.snsTopicArn = snsTopic.arn

  ctx.body = {
    message: 'Setup is fine',
  }
})

router.get('/publish', async ctx => {
  const publishData: SNS.PublishResponse = await publish(config.snsTopicArn)

  ctx.body = {
    MessageId: publishData.MessageId,
  }
})

router.get('/consume', async ctx => {
  const readData: boolean = await consumeMessages(config.sqsQueueUrl)

  ctx.body = {
    success: readData,
  }
})

export { router }
